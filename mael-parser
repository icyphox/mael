#!/usr/bin/env python3

from email import policy, utils
from email.parser import BytesParser
from email.utils import format_datetime, localtime, parseaddr, parsedate_to_datetime
from mailbox import Maildir
from pathlib import Path
import os
import sys
import datetime

def parse(bytes_msg):
    msg = BytesParser(policy=policy.compat32).parsebytes(bytes_msg)
    return msg


def print_content(msg, header_only=False):
    print(
        f"""
To: {msg["to"]}
From: {msg["from"]}
Subject: {msg["subject"]}
Date: {msg["date"]}
Cc: {msg["cc"]}
Bcc: {msg["bcc"]}
"""
    )

    x = msg.get_body(preferencelist=("plain"))
    if not header_only:
        print(x.get_content())


def _to(msg):
    print(f"{msg['to']}")
    return f"{msg['to']}"


def _from(msg):
    return f"{msg['from']}"


def _subj(msg):
    return f"{msg['subject']}"


def _date(msg):
    return f"{msg['date']}"


def copy(src, dest):
    with open(src) as f:
        tmp = f.read()

    m = Maildir(dest)
    print(m.add(tmp))


def reply(msg):
    print(
        f"""EDIT AS NEEDED!
Content-Transfer-Encoding: quoted-printable
Content-Type: text/plain; charset=UTF-8
To: {msg["from"]}
From: {msg["to"]}
Subject: Re: {msg["subject"]}
Cc: {msg["cc"]}
Bcc: {msg["bcc"]}
In-Reply-To: {msg["message-id"]}
Date: {format_datetime(localtime())}
"""
    )

    msg_str = msg.get_body(preferencelist=("plain")).get_content()
    quoted = "> " + msg_str.replace("\n", "\n> ")
    print()
    print(quoted)


# Parses all mail at a given path, and returns a list of
# tuples -- ('path_to_mail', 'msg object') 
def parse_all(path, new=False):
    mbox = Maildir(path)
    mbox.lock()
    mails = [msg for msg_id, msg in mbox.iteritems()]

    # remove all that contain the 'T' flag
    without_t = list(filter(lambda m: "T" not in m.get_flags(), mails))
    if new:
        new = []
        for m in without_t:
            if m.get_subdir() == "new":
                new.append(m)
        parsed = list(map(lambda x: parse(bytes(x)), new))

    else:
        cur = []
        for m in without_t:
            if m.get_subdir() == "cur":
                cur.append(m)
        parsed = list(map(lambda x: parse(bytes(x)), cur))

        parsed.sort(key=lambda m: parsedate_to_datetime(_date(m)), reverse=True)
    return parsed


# Lists all email in the given path, formatted all nicely.
# This is used for generating the email listing ('l' command).
def list_all(path, new=False):
    parsed = parse_all(path, new)
    for msg in parsed:
        dt = parsedate_to_datetime(_date(msg))
        d = dt.strftime("%d %b %Y %H:%M")
        f, _ = parseaddr(_from(msg))
        s = _subj(msg)
        print("{:<10}  {:<25}  {:<40}".format(d, f, s))



if __name__ == "__main__":
    # Returns only the header of the selected mail.
    if sys.argv[1] == "-h":
        path = sys.argv[2]
        m = parse(path)
        print_content(m, header_only=True)

    # Generates a reply for the selected mail.
    elif sys.argv[1] == "-r":
        path = sys.argv[2]
        index = int(sys.argv[3])
        _, msg = parse_all(path)[index]
        reply(msg)

    # Returns the path on disk for the selected mail.
    elif sys.argv[1] == "-p":
        path = sys.argv[2]
        index = int(sys.argv[3])
        mail_path, _ = parse_all(path)[index]
        print(mail_path)

    # Returns the 'from' for the selected mail.
    elif sys.argv[1] == "-f":
        path = sys.argv[2]
        index = int(sys.argv[3])
        _, msg = parse_all(path)[index]
        print(_from(msg))

    # Select an email, and return its message.
    elif sys.argv[1] == "-s":
        path = sys.argv[2]
        index = int(sys.argv[3])
        _, msg = parse_all(path)[index]

    # Returns the flags set for a given mail.
    elif sys.argv[1] == "-F":
        path = sys.argv[2]
        index = int(sys.argv[3])
        mail_path, _ = parse_all(path)[index]
        print(mail_path.split(",")[2])

    elif sys.argv[1] == "--add-flag":
        path = sys.argv[2]
        index = int(sys.argv[3])
        flag = sys.argv[4]
        _, msg = parse_all(path)[index]
        msg.add_flag(flag)


    # Copies mail from source to dest.
    elif sys.argv[1] == "-c":
        src = sys.argv[2]
        dest = sys.argv[3]
        copy(src, dest)

    # Lists all mail at given path.
    elif sys.argv[1] == "--list-old":
        path = sys.argv[2]
        list_all(path)

    elif sys.argv[1] == "--list-new":
        path = sys.argv[2]
        list_all(path, new=True)

    # Else, just prints content of mail.
    else:
        path = sys.argv[1]
        m = parse(path)
        print_content(m)
