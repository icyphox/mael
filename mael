#!/usr/bin/env bash
#
# mael - an email client written in bash, and a bit of python

# We check for INBOX, SENT and DRAFTS vars.
# Subject to change.
load_config() {
    if [[ -f ~/.maelrc ]]; then
        # run with 'shellcheck -x mael'
        # shellcheck source=/home/icy/.maelrc
        source ~/.maelrc
    else
        printf "error: '~/.maelrc' not found"
        exit 0
    fi
}

# Sync all mailboxes. Check for new mail.
sync() {
    printf '%s\n' "syncing mail..."
    mbsync -qa
    check_new
}

# Returns the count of new mail.
num_new() {
    shopt -s nullglob
    new=("$INBOX/new/"*) 
    shopt -u nullglob
    count="${#new[@]}"
    printf '%s' "$count"
}

# Check if there's new mail. If yes, prints
# the count. Runs at startup.
check_new() {
    local count
    count="$(num_new)"
    if [[ "$count" -eq 0 ]]; then
        printf '%s\n' "no new mail"
    else
        printf '%s\n' "you have $count new mail"
    fi
}

# Select a mail to operate on.
# Possible ops:
#   reply
#   forward
#   view
#   trash
select_mail() {
    selected_mail="$1"
    display_index="$selected_mail"
    merged_list=("${list_old[@]}" "${list_new[@]}")
    if [[ -v merged_list["$selected_mail"] ]]; then
        if [[ -v list_old["$selected_mail"] ]]; then
            mail_type="cur"
        else
            mail_type="new"

            # The actual index of selected new mail
            # will be the difference of the selected index
            # and the length of the full list. We add 1
            # because the list starts from 0.
            ((selected_mail=selected_mail-"${#list_old[@]}"))

        fi
    else
        printf '%s\n' "error: select a correct index"
        return
    fi

    printf '%s\n' "what would you like to do?"
    printf '%s\n' "use '?' for a list of options"
}

# A generic function to list all email. Lists new mail if it 
# exists. The output is formatted Python-side.
list_all() {
    # Disable line wrapping.
    printf '\e[?7l'
    mapfile -tn 0 list_old < <(./mael-parser -l "$INBOX" "cur")

    local count=0
    for l in "${list_old[@]}"; do
        printf '%b  %s\n' "\e[1m$count\e[0m" "$l"
        ((count++))
    done
 
    [[ "$(num_new)" -ne 0 ]] && {
        mapfile -tn 0 list_new < <(./mael-parser -l "$INBOX" "new")
        printf '\n\n'
        printf '%b\n' "\e[1mnew email\e[0m"

        for l in "${list_new[@]}"; do
            printf '%b  %s\n' "\e[1m$count\e[0m" "$l"
            ((count++))
        done
    }   
    
    # Enable line wrapping.
    printf '\e[?7h'
}


# 'mktemp' doesn't allow custom extensions, so
# we make it ourselves.
# TODO: Can we not use 'mktemp'?
mktemp_email() {
    tmp="$(mktemp -t mael.XXXXXX)"
    mv "$tmp" "$tmp.eml"
    printf '%s' "$tmp.eml"
}

# Send a message ($1) to a recepient ($2).
# The sent message is subsequently copied to SENT
# and marked as 'seen'.
# TODO: Suggest an option to save as draft, edit again
# or discard.
send() {
    msg="$1"
    to="$2"

    printf '%s' "$(< "$msg")" | msmtp "$to"
    printf '%s\n' "sent reply to $to"
    printf '%s\n' "copying to $SENT"

    sent="$(./mael-parser -c "$msg" "$SENT")"
    mark_seen "$SENT"
}

# The selected mail (index) and the path (folder) 
# are sent to the parser, which returns a 'msg'.
# We use this to fetch the 'to' and the reply template.
reply() {
    [[ ! -v selected_mail ]] && {
        printf 'error: you must select a mail first\n' 
        return
    }

    printf '%s\n' "$selected_mail"
    msg="$(./mael-parser -r "$INBOX" "$mail_type" "$selected_mail")"
    to="$(./mael-parser -f "$INBOX" "$mail_type" "$selected_mail")"
    tmp="$(mktemp_email)"

    printf '%s' "$msg" > "$tmp"
    cat "$tmp"
    #$EDITOR "$tmp"
    printf '%s\n' "not actually sending"
    # send "$tmp" "$to"

    mark_seen "$INBOX"
    mark_replied "$INBOX"
}


# Thanks Dylan.
basename() {
    local tmp

    tmp=${1%"${1##*[!/]}"}
    tmp=${tmp##*/}
    tmp=${tmp%"${2/"$tmp"}"}

    printf '%s\n' "${tmp:-/}"
}

# Thaknks Dylan, again.
dirname() {
    local tmp=${1:-.}

    [[ $tmp != *[!/]* ]] && {
        printf '/\n'
        return
    }

    tmp=${tmp%%"${tmp##*[!/]}"}

    [[ $tmp != */* ]] && {
        printf '.\n'
        return
    }

    tmp=${tmp%/*}
    tmp=${tmp%%"${tmp##*[!/]}"}

    printf '%s\n' "${tmp:-/}"
}

# The 'S' flag is appended to the name of
# the file, indicating that it has been seen.
# We do a nested 'dirname' because we want the
# path above 'cur', 'new' or 'tmp'.
mark_seen() {
    mailbox="$1"
    ./mael-parser --add-flag "$mailbox/$selected_path" "$selected_mail" "S"
}

# The 'RS' flag is appended to the name of the
# file, indicating that it has been replied to (and seen).
# We assume it has been marked 'seen', hence always
# mark_seen before mark_replied.
mark_replied() {
    mailbox"$1"
    ./mael-parser --add-flag "$mailbox/$selected_path" "$selected_mail" "R"
}

# The email is parsed, tossed into 'less' for viewing.
# The screen is cleared after.
# TODO: We're hardcoding 'less' here. Probably use a config
# option for this?
print_mail() {
    content="$(./mael-parser "$1")"
    printf '%s' "$content" | less
    printf '\e[2J\e[H'
}

quit() {
    printf '\n%s\n' "bye!"
    exit 1
}

cmd_help() {
    help="
    ?                this help menu
    l[ist]           list all mail
    sy[nc]           check new mail
    r[eply]          reply to mail
    se[lect]         select mail
    f[orward]        forward mail
    c[ompose]        compose mail 
    q (or Ctrl+C)    exit
    "
    printf '%s\n' "$help"
}

render_prompt() {
    intro="
mael v0.1.0 -- an experimental mail client
https://github.com/icyphox/mael
The MIT License (MIT)
Copyright (c) 2020 Anirudh Oppiliappan <x@icyphox.sh>
    "

    printf '%s\n' "$intro"

    load_config

    while :; do
        trap 'quit' INT
        n="$(num_new)"
        prompt="> "
        [[ "$n" -ne 0 ]] && prompt="new [$n] > "
        [[ -v display_index ]] && prompt="selected [$display_index] > "
        read -rp "$prompt" cmd args
        case "$cmd" in
            \?)
                cmd_help
                ;;
            l*)
                list_all
                ;;
            c*)
                # compose new
                ;;
            r*)
                reply
                ;;
            f*)
                # forward
                ;;
            sy*)
                sync
                ;;
            se*)
                select_mail "$args"
                ;;
            q)
                quit
                ;;
            *)
                printf '%s\n' "invalid command: $cmd"
                printf '%s\n' "use '?' for help"
                ;;
        esac
    done
}

main() {
    render_prompt
}

main "$@"
